{"ast":null,"code":"var _jsxFileName = \"/home/roy/Bank-of-Flatiron/src/components/TransactionList.js\";\nimport React, { useState, useMemo } from \"react\";\nimport Transaction from \"./Transaction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TransactionsList(_ref) {\n  let {\n    transactionsEvent\n  } = _ref;\n  console.log(transactionsEvent);\n  transact;\n\n  // const transactionEventList = transactionsEvent.map(transaction => {\n  //   return  <Transaction key={transaction.id} id={transaction.id} date={transaction.date} description={transaction.description} category={transaction.category}amount={transaction.amount}\n  //   />\n\n  // })\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"ui celled striped padded table\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"ui center aligned header\",\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"ui center aligned header\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"ui center aligned header\",\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"ui center aligned header\",\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_c = TransactionsList;\n;\n// const transactionEventList = transactionsEvent.map((transaction) => {\n//   return  <Transaction key={transaction.id} id={transaction.id} date={transaction.date} description={transaction.description} category={transaction.category}amount={transaction.amount}\n//     />\n// const [sortMethod, setSortMethod] = useState({\n//   category: -1,\n//   description: -1,\n// });\n\n// const filteredTransactions = useMemo(() => {\n//   if (!transactionsEvent) return [];\n//   return transactionsEvent.filter(transaction => {\n//     return (\n//       transaction.description.toLowerCase().includes(searchEvent.toLowerCase()) ||\n//       transaction.category.toLowerCase().includes(searchEvent.toLowerCase())\n//     );\n//   });\n// }, [transactionsEvent, searchEvent]);\n\n// const transactionEventList = transactionsEvent.map((transaction) => {\n//   return  <Transaction key={transaction.id} id={transaction.id} date={transaction.date} description={transaction.description} category={transaction.category}amount={transaction.amount}\n//     />\n\n//  });\n\n// const handleSort = (sortBy) => {\n//   setSortMethod(prevSortMethod => ({\n//     ...prevSortMethod,\n//     [sortBy]: -prevSortMethod[sortBy],\n//   }));\n\n//   const sortedTransactions = [...filteredTransactions].sort((a, b) => {\n//     const order = sortMethod[sortBy];\n//     const valA = a[sortBy].toLowerCase();\n//     const valB = b[sortBy].toLowerCase();\n\n//     if (valA < valB) return -order;\n//     if (valA > valB) return order;\n//     return 0;\n//   });\n\n//   setTransactionsEvent(sortedTransactions);\n// };\n\nexport default TransactionsList;\nvar _c;\n$RefreshReg$(_c, \"TransactionsList\");","map":{"version":3,"names":["React","useState","useMemo","Transaction","jsxDEV","_jsxDEV","TransactionsList","_ref","transactionsEvent","console","log","transact","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/roy/Bank-of-Flatiron/src/components/TransactionList.js"],"sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport Transaction from \"./Transaction\";\n\nfunction TransactionsList({ transactionsEvent }) {\n  console.log(transactionsEvent)\n\n  transact\n\n  // const transactionEventList = transactionsEvent.map(transaction => {\n  //   return  <Transaction key={transaction.id} id={transaction.id} date={transaction.date} description={transaction.description} category={transaction.category}amount={transaction.amount}\n  //   />\n\n  // })\n  \n  \n\n  \n\n  return (\n    <table className=\"ui celled striped padded table\">\n      <tbody>\n        <tr>\n          <th>\n            <h3 className=\"ui center aligned header\">Date</h3>\n          </th>\n          <th>\n            <h3 className=\"ui center aligned header\">Description</h3>\n          </th>\n          <th>\n            <h3 className=\"ui center aligned header\">Category</h3>\n          </th>\n          <th> \n            <h3 className=\"ui center aligned header\">Amount</h3>\n          </th>\n        </tr>\n        {/* {transactionEventList} */}\n      </tbody>\n    </table>\n  );\n};\n// const transactionEventList = transactionsEvent.map((transaction) => {\n//   return  <Transaction key={transaction.id} id={transaction.id} date={transaction.date} description={transaction.description} category={transaction.category}amount={transaction.amount}\n//     />\n// const [sortMethod, setSortMethod] = useState({\n  //   category: -1,\n  //   description: -1,\n  // });\n\n  // const filteredTransactions = useMemo(() => {\n  //   if (!transactionsEvent) return [];\n  //   return transactionsEvent.filter(transaction => {\n  //     return (\n  //       transaction.description.toLowerCase().includes(searchEvent.toLowerCase()) ||\n  //       transaction.category.toLowerCase().includes(searchEvent.toLowerCase())\n  //     );\n  //   });\n  // }, [transactionsEvent, searchEvent]);\n\n  // const transactionEventList = transactionsEvent.map((transaction) => {\n  //   return  <Transaction key={transaction.id} id={transaction.id} date={transaction.date} description={transaction.description} category={transaction.category}amount={transaction.amount}\n  //     />\n  \n  //  });\n\n  // const handleSort = (sortBy) => {\n  //   setSortMethod(prevSortMethod => ({\n  //     ...prevSortMethod,\n  //     [sortBy]: -prevSortMethod[sortBy],\n  //   }));\n\n  //   const sortedTransactions = [...filteredTransactions].sort((a, b) => {\n  //     const order = sortMethod[sortBy];\n  //     const valA = a[sortBy].toLowerCase();\n  //     const valB = b[sortBy].toLowerCase();\n\n  //     if (valA < valB) return -order;\n  //     if (valA > valB) return order;\n  //     return 0;\n  //   });\n\n  //   setTransactionsEvent(sortedTransactions);\n  // };\n\nexport default TransactionsList;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAChD,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,gBAAgBA,CAAAC,IAAA,EAAwB;EAAA,IAAvB;IAAEC;EAAkB,CAAC,GAAAD,IAAA;EAC7CE,OAAO,CAACC,GAAG,CAACF,iBAAiB,CAAC;EAE9BG,QAAQ;;EAER;EACA;EACA;;EAEA;;EAMA,oBACEN,OAAA;IAAOO,SAAS,EAAC,gCAAgC;IAAAC,QAAA,eAC/CR,OAAA;MAAAQ,QAAA,eACER,OAAA;QAAAQ,QAAA,gBACER,OAAA;UAAAQ,QAAA,eACER,OAAA;YAAIO,SAAS,EAAC,0BAA0B;YAAAC,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAK;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAC/C,eACLZ,OAAA;UAAAQ,QAAA,eACER,OAAA;YAAIO,SAAS,EAAC,0BAA0B;YAAAC,QAAA,EAAC;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAK;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACtD,eACLZ,OAAA;UAAAQ,QAAA,eACER,OAAA;YAAIO,SAAS,EAAC,0BAA0B;YAAAC,QAAA,EAAC;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAK;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACnD,eACLZ,OAAA;UAAAQ,QAAA,eACER,OAAA;YAAIO,SAAS,EAAC,0BAA0B;YAAAC,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAK;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACjD;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAEC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEZ;AAACC,EAAA,GApCQZ,gBAAgB;AAoCxB;AACD;AACA;AACA;AACA;AACE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEF,eAAeA,gBAAgB;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}